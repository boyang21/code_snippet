import sys

from util import *

def pp(x):
    """Returns a pretty-print string representation of a number.
       A float number is represented by an integer, if it is whole,
       and up to two decimal places if it isn't
    """
    if isinstance(x, float):
        if x.is_integer():
            return str(int(x))
        else:
            return "{0:.2f}".format(x)
    return str(x)

class point(object):
    """A point in a two dimensional space"""
    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)
        
    def __repr__(self):
        return '(' + pp(self.x) + ', ' + pp(self.y) + ')'
        
    def __eq__(self, pt):
        return self.x == pt.x and self.y == pt.y

    def hash(self):
        return (self.x, self.y)

class line(object):
    """A line between two points"""
    def __init__(self, src, dst):
        self.src = src
        self.dst = dst

    def __repr__(self):
        return '['+ str(self.src) + '-->' + str(self.dst) + ']'

    def __eq__(self, ln):
        return (self.src == ln.src and self.dst == ln.dst) or \
               (self.src == ln.dst and self.dst == ln.src)

def intersect (l1, l2):
    """Returns a point at which two lines intersect"""
    x1, y1 = l1.src.x, l1.src.y
    x2, y2 = l1.dst.x, l1.dst.y

    x3, y3 = l2.src.x, l2.src.y
    x4, y4 = l2.dst.x, l2.dst.y
    
    # overlap case
    if (y1-y2) * (x3-x4) == (y3-y4) * (x1-x2):
        result = []
        if x1 < x2:
            l1_l_x = x1
            l1_l_y = y1
            l1_r_x = x2
            l1_r_y = y2
        else:
            l1_l_x = x2
            l1_l_y = y2
            l1_r_x = x1
            l1_r_y = y1
        if x3 < x4:
            l2_l_x = x3
            l2_l_y = y3
            l2_r_x = x4
            l2_r_y = y4
        else:
            l2_l_x = x4
            l2_l_y = y4
            l2_r_x = x3
            l2_r_y = y3
        
        if l1_l_x > l2_r_x or l2_l_x > l1_r_x:
            return []
        if l1_l_x <= l2_l_x:
            result.append(point(l2_l_x, l2_l_y))
        else:
            result.append(point(l1_l_x, l1_l_y))

        if l1_r_x <= l2_r_x and not point(l1_r_x, l1_r_y) in result:
            result.append(point(l1_r_x, l1_r_y))
        elif l2_r_x <= l1_r_x and not point(l2_r_x, l2_r_y) in result:
            result.append(point(l2_r_x, l2_r_y))
        return result

    xnum = ((x1*y2-y1*x2)*(x3-x4) - (x1-x2)*(x3*y4-y3*x4))
    xden = ((x1-x2)*(y3-y4) - (y1-y2)*(x3-x4))
    try:
        xcoor =  xnum / xden
    except(ZeroDivisionError):
        return [] #point(sys.maxint, sys.maxint, 'aaa')

    ynum = (x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4-y3*x4)
    yden = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4)
    try:
        ycoor = ynum / yden
    except(ZeroDivisionError):
        return [] #point(sys.maxint, sys.maxtint, 'aaa')
    if xcoor >= max(x1, x2):
        return []
    return [point(xcoor, ycoor)]
    

if __name__ == '__main__':
    l1 = line(point(4, -1), point(6, -1))
    l2 = line(point(5, 6), point(3, 8))
    print 'Intersection of', l1, 'with', l2, 'is', intersect(l1, l2) 
#     l3 = line(point(1, 5, 5), point(5, 8,  6))
#     l4 = line(point(1, 3, 7), point(5, 7, 8))
#     l5 = line(point(3, 6, 9), point(5, 8, 10))

#     print 'Intersection of', l1, 'with', l3, 'is', intersect(l1, l3)
#     print 'Intersection of', l2, 'with', l3, 'is', intersect(l2, l3)
#     print 'Intersection of', l1, 'with', l4, 'is', intersect(l1, l4)
#     print 'Intersection of', l1, 'with', l5, 'is', intersect(l1, l5)
